package com.qa.clients;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import org.apache.http.Header;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpDelete;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.methods.HttpPut;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;
import org.json.JSONObject;

public class RestClients {

	// 1. Method for GET call
	public CloseableHttpResponse get(String url) throws ClientProtocolException, IOException {

		// CloseableHttpClient is abstract class which is use to create http client
		// connection
		CloseableHttpClient httpClient = HttpClients.createDefault();

		// create get object to hit request
		HttpGet httpGet = new HttpGet(url);

		// This will execute GET request and we will get response so we need to
		// store it as 'closeableHttpResponse' with help of 'CloseableHttpResponse'
		// interface
		CloseableHttpResponse closeableHttpResponse = httpClient.execute(httpGet);

		//This method will return closeableHttpResponse.
		return closeableHttpResponse;
		

	}
	
	// 2. Method for POST call
		public CloseableHttpResponse post(String url, String entityString, HashMap<String, String> headerMap) throws ClientProtocolException, IOException {
			CloseableHttpClient httpClient = HttpClients.createDefault();

			// http post request
			HttpPost httpPost = new HttpPost(url);
			
			// Payload
			httpPost.setEntity(new StringEntity(entityString));
			
			// Header
			for(Map.Entry<String, String> entry : headerMap.entrySet()) {
				httpPost.addHeader(entry.getKey(), entry.getValue());
			}
			
			// Execute Post request
			CloseableHttpResponse CloseableHttpResponse = httpClient.execute(httpPost);
			
			// CloseableHttpResponse will return response 
			return CloseableHttpResponse;
		}
		
	// 3. Method for PUT call	
		public CloseableHttpResponse put(String url, String entityString) throws ClientProtocolException, IOException {
			CloseableHttpClient httpClient = HttpClients.createDefault();
			HttpPut httpPut = new HttpPut(url);
			
			// Payload
			httpPut.setEntity(new StringEntity(entityString));
						
			/*// Header
			for(Map.Entry<String, String> entry : headerMap.entrySet()) {
				httpPut.addHeader(entry.getKey(), entry.getValue());
			}
				*/		
			// Execute Post request
			CloseableHttpResponse CloseableHttpResponse = httpClient.execute(httpPut);
						
			// CloseableHttpResponse will return response 
			return CloseableHttpResponse;
		}
		
	// 4. Method for Delete call	
		public void delete(String url, String entityString) {
			CloseableHttpClient httpClient = HttpClients.createDefault();
			HttpDelete httpDelete = new HttpDelete(url);
			
			 
		}

}
